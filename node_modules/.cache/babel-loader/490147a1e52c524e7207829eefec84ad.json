{"ast":null,"code":"import { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\n\nfunction isSpringType(options, keys) {\n  return keys.some(key => options[key] !== undefined);\n}\n\nfunction getSpringOptions(options) {\n  let springOptions = {\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false,\n    ...options\n  }; // stiffness/damping/mass overrides duration/bounce\n\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    const derived = findSpring(options);\n    springOptions = { ...springOptions,\n      ...derived,\n      velocity: 0.0,\n      mass: 1.0\n    };\n    springOptions.isResolvedFromDuration = true;\n  }\n\n  return springOptions;\n}\n\nconst velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\n\nfunction spring(_ref) {\n  let {\n    keyframes,\n    restSpeed = 2,\n    restDelta = 0.01,\n    ...options\n  } = _ref;\n  let origin = keyframes[0];\n  let target = keyframes[keyframes.length - 1];\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  const state = {\n    done: false,\n    value: origin\n  };\n  const {\n    stiffness,\n    damping,\n    mass,\n    velocity,\n    duration,\n    isResolvedFromDuration\n  } = getSpringOptions(options);\n  let resolveSpring = zero;\n  let initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n\n  function createSpring() {\n    const initialDelta = target - origin;\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    /**\n     * If we're working within what looks like a 0-1 range, change the default restDelta\n     * to 0.01\n     */\n\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(target - origin) / 100, 0.4);\n    }\n\n    if (dampingRatio < 1) {\n      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio); // Underdamped spring\n\n      resolveSpring = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      // Critically damped spring\n      resolveSpring = t => target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    } else {\n      // Overdamped spring\n      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n\n      resolveSpring = t => {\n        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t); // When performing sinh or cosh values can hit Infinity so we cap them here\n\n        const freqForT = Math.min(dampedAngularFreq * t, 300);\n        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n\n  createSpring();\n  return {\n    next: t => {\n      const current = resolveSpring(t);\n\n      if (!isResolvedFromDuration) {\n        let currentVelocity = initialVelocity;\n\n        if (t !== 0) {\n          /**\n           * We only need to calculate velocity for under-damped springs\n           * as over- and critically-damped springs can't overshoot, so\n           * checking only for displacement is enough.\n           */\n          if (dampingRatio < 1) {\n            const prevT = Math.max(0, t - velocitySampleDuration);\n            currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n          } else {\n            currentVelocity = 0;\n          }\n        }\n\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n\n      state.value = state.done ? target : current;\n      return state;\n    },\n    flipTarget: () => {\n      initialVelocity = -initialVelocity;\n      [origin, target] = [target, origin];\n      createSpring();\n    }\n  };\n}\n\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\n\nconst zero = _t => 0;\n\nexport { spring };","map":{"version":3,"names":["findSpring","calcAngularFreq","velocityPerSecond","durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","getSpringOptions","springOptions","velocity","stiffness","damping","mass","isResolvedFromDuration","derived","velocitySampleDuration","spring","keyframes","restSpeed","restDelta","origin","target","length","state","done","value","duration","resolveSpring","zero","initialVelocity","dampingRatio","Math","sqrt","createSpring","initialDelta","undampedAngularFreq","min","abs","angularFreq","t","envelope","exp","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","prevT","max","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","a","b","_t"],"sources":["C:/xampp/htdocs/om_react/node_modules/framer-motion/dist/es/animation/legacy-popmotion/spring.mjs"],"sourcesContent":["import { findSpring, calcAngularFreq } from './find-spring.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            velocity: 0.0,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nconst velocitySampleDuration = 5;\n/**\n * This is based on the spring implementation of Wobble https://github.com/skevy/wobble\n */\nfunction spring({ keyframes, restSpeed = 2, restDelta = 0.01, ...options }) {\n    let origin = keyframes[0];\n    let target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    function createSpring() {\n        const initialDelta = target - origin;\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        /**\n         * If we're working within what looks like a 0-1 range, change the default restDelta\n         * to 0.01\n         */\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(target - origin) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            // Underdamped spring\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (target -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            // Critically damped spring\n            resolveSpring = (t) => target -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            // Overdamped spring\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                // When performing sinh or cosh values can hit Infinity so we cap them here\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (target -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = initialVelocity;\n                if (t !== 0) {\n                    /**\n                     * We only need to calculate velocity for under-damped springs\n                     * as over- and critically-damped springs can't overshoot, so\n                     * checking only for displacement is enough.\n                     */\n                    if (dampingRatio < 1) {\n                        const prevT = Math.max(0, t - velocitySampleDuration);\n                        currentVelocity = velocityPerSecond(current - resolveSpring(prevT), t - prevT);\n                    }\n                    else {\n                        currentVelocity = 0;\n                    }\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n        flipTarget: () => {\n            initialVelocity = -initialVelocity;\n            [origin, target] = [target, origin];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nexport { spring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}