{"ast":null,"code":"import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { appearStoreId } from './store-id.mjs';\n\nfunction handoffOptimizedAppearAnimation(id, name) {\n  const {\n    MotionAppearAnimations\n  } = window;\n  const animationId = appearStoreId(id, transformProps.has(name) ? \"transform\" : name);\n  const animation = MotionAppearAnimations && MotionAppearAnimations.get(animationId);\n\n  if (animation) {\n    /**\n     * We allow the animation to persist until the next frame:\n     *   1. So it continues to play until Framer Motion is ready to render\n     *      (avoiding a potential flash of the element's original state)\n     *   2. As all independent transforms share a single transform animation, stopping\n     *      it synchronously would prevent subsequent transforms from handing off.\n     */\n    sync.render(() => {\n      /**\n       * Animation.cancel() throws so it needs to be wrapped in a try/catch\n       */\n      try {\n        animation.cancel();\n        MotionAppearAnimations.delete(animationId);\n      } catch (e) {}\n    });\n    return animation.currentTime || 0;\n  } else {\n    return 0;\n  }\n}\n\nexport { handoffOptimizedAppearAnimation };","map":{"version":3,"names":["sync","transformProps","appearStoreId","handoffOptimizedAppearAnimation","id","name","MotionAppearAnimations","window","animationId","has","animation","get","render","cancel","delete","e","currentTime"],"sources":["C:/xampp/htdocs/om_react/node_modules/framer-motion/dist/es/animation/optimized-appear/handoff.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { appearStoreId } from './store-id.mjs';\n\nfunction handoffOptimizedAppearAnimation(id, name) {\n    const { MotionAppearAnimations } = window;\n    const animationId = appearStoreId(id, transformProps.has(name) ? \"transform\" : name);\n    const animation = MotionAppearAnimations && MotionAppearAnimations.get(animationId);\n    if (animation) {\n        /**\n         * We allow the animation to persist until the next frame:\n         *   1. So it continues to play until Framer Motion is ready to render\n         *      (avoiding a potential flash of the element's original state)\n         *   2. As all independent transforms share a single transform animation, stopping\n         *      it synchronously would prevent subsequent transforms from handing off.\n         */\n        sync.render(() => {\n            /**\n             * Animation.cancel() throws so it needs to be wrapped in a try/catch\n             */\n            try {\n                animation.cancel();\n                MotionAppearAnimations.delete(animationId);\n            }\n            catch (e) { }\n        });\n        return animation.currentTime || 0;\n    }\n    else {\n        return 0;\n    }\n}\n\nexport { handoffOptimizedAppearAnimation };\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,2BAArB;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,aAAT,QAA8B,gBAA9B;;AAEA,SAASC,+BAAT,CAAyCC,EAAzC,EAA6CC,IAA7C,EAAmD;EAC/C,MAAM;IAAEC;EAAF,IAA6BC,MAAnC;EACA,MAAMC,WAAW,GAAGN,aAAa,CAACE,EAAD,EAAKH,cAAc,CAACQ,GAAf,CAAmBJ,IAAnB,IAA2B,WAA3B,GAAyCA,IAA9C,CAAjC;EACA,MAAMK,SAAS,GAAGJ,sBAAsB,IAAIA,sBAAsB,CAACK,GAAvB,CAA2BH,WAA3B,CAA5C;;EACA,IAAIE,SAAJ,EAAe;IACX;AACR;AACA;AACA;AACA;AACA;AACA;IACQV,IAAI,CAACY,MAAL,CAAY,MAAM;MACd;AACZ;AACA;MACY,IAAI;QACAF,SAAS,CAACG,MAAV;QACAP,sBAAsB,CAACQ,MAAvB,CAA8BN,WAA9B;MACH,CAHD,CAIA,OAAOO,CAAP,EAAU,CAAG;IAChB,CATD;IAUA,OAAOL,SAAS,CAACM,WAAV,IAAyB,CAAhC;EACH,CAnBD,MAoBK;IACD,OAAO,CAAP;EACH;AACJ;;AAED,SAASb,+BAAT"},"metadata":{},"sourceType":"module"}